name: Semantic Version Tag and Release

on:
  workflow_dispatch:
    inputs:
      bump:
        description: 'Version bump type (major, minor, patch)'
        required: true
        default: 'patch'

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: https://github.com/actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Ensure tags are present
        run: git fetch --force --tags

      - name: Set up Git user
        run: |
          git config --global user.name "Gitea Actions"
          git config --global user.email "actions@gitea.local"

      # 1) Compute new version (from VERSION file)
      - name: Calculate new version
        id: version
        shell: bash
        run: |
          set -euo pipefail
          BUMP_TYPE="${{ github.event.inputs.bump }}"
          VERSION_FILE="VERSION"
          VERSION=$(cat "$VERSION_FILE")
          IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"
          case "$BUMP_TYPE" in
            major) MAJOR=$((MAJOR+1)); MINOR=0; PATCH=0 ;;
            minor) MINOR=$((MINOR+1)); PATCH=0 ;;
            *)     PATCH=$((PATCH+1)) ;;
          esac
          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          echo "$NEW_VERSION" > "$VERSION_FILE"
          echo "NEW_VERSION=$NEW_VERSION" >> "$GITHUB_OUTPUT"

      # 2) Generate CHANGELOG for "unreleased" range and include the version in the heading
      - name: Generate CHANGELOG.md
        shell: bash
        run: |
          set -euo pipefail
          NEW="${{ steps.version.outputs.NEW_VERSION }}"

          # Provide a version to conventional-changelog (repo might not have package.json)
          printf '{\n  "version": "%s"\n}\n' "$NEW" > package.json

          # Prepend latest notes in-place
          npx --yes conventional-changelog-cli \
            -p conventionalcommits \
            --tag-prefix "v" \
            -i CHANGELOG.md -s

          rm -f package.json

          git add VERSION CHANGELOG.md
          git commit -m "docs(changelog): update for v$NEW" || echo "No changelog changes"
          git push origin HEAD

      # 3) Build release notes for just the latest section (unreleased == upcoming tag)
      - name: Build release notes (latest)
        id: notes
        shell: bash
        run: |
          set -euo pipefail
          NEW="${{ steps.version.outputs.NEW_VERSION }}"
          NOTES="$(npx --yes conventional-changelog-cli -p conventionalcommits --tag-prefix 'v' -r 1)"
          # Hide the bump/chore line if present
          NOTES="$(printf "%s" "$NOTES" | sed "/chore(release): v${NEW}/d")"
          {
            echo "notes<<EOF"
            echo "$NOTES"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

      # 4) Tag and push (after changelog + notes are ready)
      - name: Tag and push
        shell: bash
        run: |
          set -euo pipefail
          NEW="${{ steps.version.outputs.NEW_VERSION }}"
          git tag "v$NEW"
          git push origin "v$NEW"

      # 5) Create Gitea release
      - name: Create Gitea release
        uses: https://github.com/akkuman/gitea-release-action@v1
        with:
          token: ${{ secrets.RELEASE_TOKEN }}
          server_url: ${{ gitea.server_url }}
          repository: ${{ gitea.repository }}
          tag_name: v${{ steps.version.outputs.NEW_VERSION }}
          name: "Release v${{ steps.version.outputs.NEW_VERSION }}"
          body: ${{ steps.notes.outputs.notes }}
          # files: |
          #   CHANGELOG.md
